{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","fetchRobots","searchValue","isPending","robotsFiltered","filter","robot","toLowerCase","includes","style","ErrorBoundary","connect","console","log","setSearchField","robotsState","dispatch","event","payload","target","value","a","fetch","response","json","data","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialState","initialStateFetchRobots","middleware","thunk","rootReducer","combineReducers","action","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.30410767.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt={'robot' + id} src={`https://robohash.org/${id}`} />\r\n            <div>\r\n                <h2 className=\"tc f3 helvetica\">{name}</h2>\r\n                <p className=\"tc helvetica\">{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n\r\n        <div className='tc bg-green'>\r\n            {\r\n                robots.map((user, id) => {\r\n                    return <Card key={id} id={user.id} name={user.name} email={user.email} />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList","import React from 'react'\r\n\r\n\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n\r\n    return (<input\r\n        type='search'\r\n        placeholder='Type the robot name'\r\n        className='input-reset ba b--black-20 pa2 mb2 w-25 helvetica'\r\n        onChange={onSearchChange}\r\n    />\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\n\r\nconst Scroll = props => {\r\n    return <div className={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>{props.children}</div>\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.hasError) {\r\n            return <h1>Mega error occured....</h1>\r\n        }\r\n\r\n        return this.props.children\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry ","import React, { Component, Fragment } from 'react'\r\nimport CardList from '../components/CardList'\r\n//import { robots } from './robots'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport { connect } from 'react-redux';\r\nimport './App.css'\r\n\r\nimport { setSearchField, fetchRobots } from '../actions'\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchRobots();\r\n    }\r\n\r\n    render() {\r\n\r\n        const { onSearchChange, searchValue, robots, isPending, error } = this.props;\r\n\r\n        const robotsFiltered = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchValue.toLowerCase())\r\n        }\r\n        )\r\n\r\n        return isPending ? <h1>Loading....</h1>\r\n            : (\r\n                <Fragment>\r\n                    <header className='tc bg-green ma0 pa2'>\r\n                        <h1>ROBOFRIENDS</h1>\r\n                        <SearchBox onSearchChange={onSearchChange} />\r\n                    </header>\r\n                    <section id=\"robotsSection\" className='bg-green' style={{ height: '100vh' }}>\r\n                        <Scroll>\r\n                            <ErrorBoundary>\r\n                                <CardList robots={robotsFiltered} />\r\n                            </ErrorBoundary>\r\n                        </Scroll>\r\n                    </section>\r\n                </Fragment>\r\n            )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    console.log('mapStateToProps - ', state)\r\n    return {\r\n        searchValue: state.setSearchField.searchValue,\r\n        robots: state.robotsState.robots,\r\n        isPending: state.robotsState.isPending,\r\n        error: state.robotsState.error\r\n\r\n    }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        fetchRobots: () => dispatch(fetchRobots())\r\n    }\r\n}\r\n\r\n\r\n// const mapDispatchToProps = {\r\n//     onSearchChange: event => setSearchField(event.target.value),\r\n//     fetchRobots: dispatch => dispatch(fetchRobots())\r\n// }\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    FETCH_ROBOTS_PENDING,\r\n    FETCH_ROBOTS_READY,\r\n    FETCH_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\n\r\nexport const fetchRobots = () => async (dispatch) => {\r\n\r\n    dispatch({ type: FETCH_ROBOTS_PENDING })\r\n\r\n    try {\r\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users`);\r\n        const data = await response.json();\r\n        dispatch({ type: FETCH_ROBOTS_READY, payload: data })\r\n\r\n    } catch (error) {\r\n        dispatch({ type: FETCH_ROBOTS_FAILED, payload: error })\r\n    }\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING';\r\nexport const FETCH_ROBOTS_READY = 'FETCH_ROBOTS_READY';\r\nexport const FETCH_ROBOTS_FAILED = 'FETCH_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    FETCH_ROBOTS_PENDING,\r\n    FETCH_ROBOTS_READY,\r\n    FETCH_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialState = {\r\n    searchValue: ''\r\n}\r\n\r\n\r\nexport const setSearchField = (state = initialState, action = {}) => {\r\n    // console.log('reducers - setSearchField - ', action)\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchValue: action.payload };\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\n\r\nconst initialStateFetchRobots = {\r\n    robots: []\r\n}\r\n\r\n\r\nexport const robotsState = (state = initialStateFetchRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case FETCH_ROBOTS_PENDING:\r\n            return { ...state, isPending: true };\r\n        case FETCH_ROBOTS_READY:\r\n            return { ...state, isPending: false, robots: action.payload };\r\n        case FETCH_ROBOTS_FAILED:\r\n            return { ...state, isPending: false, error: action.payload };\r\n        default:\r\n            return { ...state };\r\n    }\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { setSearchField, robotsState } from './reducers';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nimport 'tachyons'\r\n\r\n\r\nconst middleware = [thunk]\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middleware.push(logger)\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({ setSearchField, robotsState });\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}