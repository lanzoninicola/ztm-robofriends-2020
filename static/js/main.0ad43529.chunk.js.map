{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","overflow","height","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","event","searchValue","target","value","fetch","response","json","robotsFiltered","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iOAiBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAEtB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAK,QAAUJ,EAAIK,IAAG,+BAA0BL,KACrD,6BACI,wBAAIG,UAAU,mBAAmBF,GACjC,uBAAGE,UAAU,gBAAgBD,MCQ9BI,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OAEI,yBAAKJ,UAAU,eAEPI,EAAOC,KAAI,SAACC,EAAMT,GACd,OAAO,kBAAC,EAAD,CAAMU,IAAKV,EAAIA,GAAIS,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,aCMrES,EAZG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAEjB,OAAQ,2BACJC,KAAK,SACLC,YAAY,sBACZX,UAAU,oDACVY,SAAUH,KCHHI,EAJA,SAAAC,GACX,OAAO,yBAAKd,UAAW,CAAEe,SAAU,SAAUC,OAAQ,QAASC,OAAQ,oBAAsBH,EAAMI,WCuBvFC,E,kDAvBX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IAEDM,MAAQ,CACTC,UAAU,GAJC,E,8DAQDC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SACJ,sDAGJG,KAAKV,MAAMI,a,GAnBCQ,aCoDZC,E,kDA9CX,aAAe,IAAD,8BACV,gBAOJlB,eAAiB,SAACmB,GACd,EAAKH,SAAS,CAAEI,YAAaD,EAAME,OAAOC,SAP1C,EAAKX,MAAQ,CACThB,OAAQ,GACRyB,YAAa,IAJP,E,kMAaaG,MAAM,8C,cAAvBC,E,gBACaA,EAASC,O,OAAtBA,E,OAENV,KAAKC,SAAS,CAAErB,OAAQ8B,I,qIAGlB,IAAD,OAECC,EAAiBX,KAAKJ,MAAMhB,OAAOgC,QAAO,SAAAC,GAC5C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKnB,MAAMS,YAAYS,kBAKpE,OACI,kBAAC,WAAD,KACI,4BAAQtC,UAAU,uBACd,wBAAIA,UAAU,sBAAd,eACA,kBAAC,EAAD,CAAWS,eAAgBe,KAAKf,kBAEpC,iCACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUL,OAAQ+B,Y,GArC5BT,aCIEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.0ad43529.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt={'robot' + id} src={`https://robohash.org/${id}`} />\r\n            <div>\r\n                <h2 className=\"tc f3 helvetica\">{name}</h2>\r\n                <p className=\"tc helvetica\">{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n\r\n        <div className='tc bg-green'>\r\n            {\r\n                robots.map((user, id) => {\r\n                    return <Card key={id} id={user.id} name={user.name} email={user.email} />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList","import React from 'react'\r\n\r\n\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n\r\n    return (<input\r\n        type='search'\r\n        placeholder='Type the robot name'\r\n        className='input-reset ba b--black-20 pa2 mb2 w-25 helvetica'\r\n        onChange={onSearchChange}\r\n    />\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\n\r\nconst Scroll = props => {\r\n    return <div className={{ overflow: 'scroll', height: '800px', border: 'solid 1px black' }}>{props.children}</div>\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.hasError) {\r\n            return <h1>Mega error occured....</h1>\r\n        }\r\n\r\n        return this.props.children\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry ","import React, { Component, Fragment } from 'react'\r\nimport CardList from './CardList'\r\n//import { robots } from './robots'\r\nimport SearchBox from './SearchBox'\r\nimport Scroll from './Scroll'\r\nimport ErrorBoundry from './ErrorBoundry'\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchValue: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchValue: event.target.value })\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users`);\r\n        const json = await response.json();\r\n\r\n        this.setState({ robots: json });\r\n    }\r\n\r\n    render() {\r\n\r\n        const robotsFiltered = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchValue.toLowerCase())\r\n        }\r\n        )\r\n\r\n\r\n        return (\r\n            <Fragment>\r\n                <header className='tc bg-green ma0 pa2'>\r\n                    <h1 className='f1 helvetica white'>ROBOFRIENDS</h1>\r\n                    <SearchBox onSearchChange={this.onSearchChange} />\r\n                </header>\r\n                <section>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={robotsFiltered} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </section>\r\n            </Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'tachyons'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}